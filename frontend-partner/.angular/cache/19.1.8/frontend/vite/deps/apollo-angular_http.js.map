{
  "version": 3,
  "sources": ["../../../../../../node_modules/@apollo/client/link/batch/batching.js", "../../../../../../node_modules/@apollo/client/link/batch/batchLink.js", "../../../../../../node_modules/apollo-angular/fesm2022/ngApolloLinkHttp.mjs"],
  "sourcesContent": ["import { __assign } from \"tslib\";\nimport { Observable } from \"../../utilities/index.js\";\n// QueryBatcher doesn't fire requests immediately. Requests that were enqueued within\n// a certain amount of time (configurable through `batchInterval`) will be batched together\n// into one query.\nvar OperationBatcher = /** @class */function () {\n  function OperationBatcher(_a) {\n    var batchDebounce = _a.batchDebounce,\n      batchInterval = _a.batchInterval,\n      batchMax = _a.batchMax,\n      batchHandler = _a.batchHandler,\n      batchKey = _a.batchKey;\n    // Queue on which the QueryBatcher will operate on a per-tick basis.\n    this.batchesByKey = new Map();\n    this.scheduledBatchTimerByKey = new Map();\n    this.batchDebounce = batchDebounce;\n    this.batchInterval = batchInterval;\n    this.batchMax = batchMax || 0;\n    this.batchHandler = batchHandler;\n    this.batchKey = batchKey || function () {\n      return \"\";\n    };\n  }\n  OperationBatcher.prototype.enqueueRequest = function (request) {\n    var _this = this;\n    var requestCopy = __assign(__assign({}, request), {\n      next: [],\n      error: [],\n      complete: [],\n      subscribers: new Set()\n    });\n    var key = this.batchKey(request.operation);\n    if (!requestCopy.observable) {\n      requestCopy.observable = new Observable(function (observer) {\n        var batch = _this.batchesByKey.get(key);\n        if (!batch) _this.batchesByKey.set(key, batch = new Set());\n        // These booleans seem to me (@benjamn) like they might always be the\n        // same (and thus we could do with only one of them), but I'm not 100%\n        // sure about that.\n        var isFirstEnqueuedRequest = batch.size === 0;\n        var isFirstSubscriber = requestCopy.subscribers.size === 0;\n        requestCopy.subscribers.add(observer);\n        if (isFirstSubscriber) {\n          batch.add(requestCopy);\n        }\n        // called for each subscriber, so need to save all listeners (next, error, complete)\n        if (observer.next) {\n          requestCopy.next.push(observer.next.bind(observer));\n        }\n        if (observer.error) {\n          requestCopy.error.push(observer.error.bind(observer));\n        }\n        if (observer.complete) {\n          requestCopy.complete.push(observer.complete.bind(observer));\n        }\n        // The first enqueued request triggers the queue consumption after `batchInterval` milliseconds.\n        if (isFirstEnqueuedRequest || _this.batchDebounce) {\n          _this.scheduleQueueConsumption(key);\n        }\n        // When amount of requests reaches `batchMax`, trigger the queue consumption without waiting on the `batchInterval`.\n        if (batch.size === _this.batchMax) {\n          _this.consumeQueue(key);\n        }\n        return function () {\n          var _a;\n          // If this is last subscriber for this request, remove request from queue\n          if (requestCopy.subscribers.delete(observer) && requestCopy.subscribers.size < 1) {\n            // If this is last request from queue, remove queue entirely\n            if (batch.delete(requestCopy) && batch.size < 1) {\n              _this.consumeQueue(key);\n              // If queue was in flight, cancel it\n              (_a = batch.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n            }\n          }\n        };\n      });\n    }\n    return requestCopy.observable;\n  };\n  // Consumes the queue.\n  // Returns a list of promises (one for each query).\n  OperationBatcher.prototype.consumeQueue = function (key) {\n    if (key === void 0) {\n      key = \"\";\n    }\n    var batch = this.batchesByKey.get(key);\n    // Delete this batch and process it below.\n    this.batchesByKey.delete(key);\n    if (!batch || !batch.size) {\n      // No requests to be processed.\n      return;\n    }\n    var operations = [];\n    var forwards = [];\n    var observables = [];\n    var nexts = [];\n    var errors = [];\n    var completes = [];\n    // Even though batch is a Set, it preserves the order of first insertion\n    // when iterating (per ECMAScript specification), so these requests will be\n    // handled in the order they were enqueued (minus any deleted ones).\n    batch.forEach(function (request) {\n      operations.push(request.operation);\n      forwards.push(request.forward);\n      observables.push(request.observable);\n      nexts.push(request.next);\n      errors.push(request.error);\n      completes.push(request.complete);\n    });\n    var batchedObservable = this.batchHandler(operations, forwards) || Observable.of();\n    var onError = function (error) {\n      //each callback list in batch\n      errors.forEach(function (rejecters) {\n        if (rejecters) {\n          //each subscriber to request\n          rejecters.forEach(function (e) {\n            return e(error);\n          });\n        }\n      });\n    };\n    batch.subscription = batchedObservable.subscribe({\n      next: function (results) {\n        if (!Array.isArray(results)) {\n          results = [results];\n        }\n        if (nexts.length !== results.length) {\n          var error = new Error(\"server returned results with length \".concat(results.length, \", expected length of \").concat(nexts.length));\n          error.result = results;\n          return onError(error);\n        }\n        results.forEach(function (result, index) {\n          if (nexts[index]) {\n            nexts[index].forEach(function (next) {\n              return next(result);\n            });\n          }\n        });\n      },\n      error: onError,\n      complete: function () {\n        completes.forEach(function (complete) {\n          if (complete) {\n            //each subscriber to request\n            complete.forEach(function (c) {\n              return c();\n            });\n          }\n        });\n      }\n    });\n    return observables;\n  };\n  OperationBatcher.prototype.scheduleQueueConsumption = function (key) {\n    var _this = this;\n    clearTimeout(this.scheduledBatchTimerByKey.get(key));\n    this.scheduledBatchTimerByKey.set(key, setTimeout(function () {\n      _this.consumeQueue(key);\n      _this.scheduledBatchTimerByKey.delete(key);\n    }, this.batchInterval));\n  };\n  return OperationBatcher;\n}();\nexport { OperationBatcher };\n", "import { __extends } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { OperationBatcher } from \"./batching.js\";\nexport { OperationBatcher } from \"./batching.js\";\nvar BatchLink = /** @class */function (_super) {\n  __extends(BatchLink, _super);\n  function BatchLink(fetchParams) {\n    var _this = _super.call(this) || this;\n    var _a = fetchParams || {},\n      batchDebounce = _a.batchDebounce,\n      _b = _a.batchInterval,\n      batchInterval = _b === void 0 ? 10 : _b,\n      _c = _a.batchMax,\n      batchMax = _c === void 0 ? 0 : _c,\n      _d = _a.batchHandler,\n      batchHandler = _d === void 0 ? function () {\n        return null;\n      } : _d,\n      _e = _a.batchKey,\n      batchKey = _e === void 0 ? function () {\n        return \"\";\n      } : _e;\n    _this.batcher = new OperationBatcher({\n      batchDebounce: batchDebounce,\n      batchInterval: batchInterval,\n      batchMax: batchMax,\n      batchHandler: batchHandler,\n      batchKey: batchKey\n    });\n    //make this link terminating\n    if (fetchParams.batchHandler.length <= 1) {\n      _this.request = function (operation) {\n        return _this.batcher.enqueueRequest({\n          operation: operation\n        });\n      };\n    }\n    return _this;\n  }\n  BatchLink.prototype.request = function (operation, forward) {\n    return this.batcher.enqueueRequest({\n      operation: operation,\n      forward: forward\n    });\n  };\n  return BatchLink;\n}(ApolloLink);\nexport { BatchLink };\n", "import { print } from 'graphql';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { ApolloLink, Observable as Observable$1 } from '@apollo/client/core';\nimport { BatchLink } from '@apollo/client/link/batch';\nimport { Observable } from 'rxjs';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nconst fetch = (req, httpClient, extractFiles) => {\n  const shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;\n  const shouldStringify = param => ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;\n  const isBatching = req.body.length;\n  let shouldUseMultipart = req.options && req.options.useMultipart;\n  let multipartInfo;\n  if (shouldUseMultipart) {\n    if (isBatching) {\n      return new Observable(observer => observer.error(new Error('File upload is not available when combined with Batching')));\n    }\n    if (!shouldUseBody) {\n      return new Observable(observer => observer.error(new Error('File upload is not available when GET is used')));\n    }\n    if (!extractFiles) {\n      return new Observable(observer => observer.error(new Error(`To use File upload you need to pass \"extractFiles\" function from \"extract-files\" library to HttpLink's options`)));\n    }\n    multipartInfo = extractFiles(req.body);\n    shouldUseMultipart = !!multipartInfo.files.size;\n  }\n  // `body` for some, `params` for others\n  let bodyOrParams = {};\n  if (isBatching) {\n    if (!shouldUseBody) {\n      return new Observable(observer => observer.error(new Error('Batching is not available for GET requests')));\n    }\n    bodyOrParams = {\n      body: req.body\n    };\n  } else {\n    const body = shouldUseMultipart ? multipartInfo.clone : req.body;\n    if (shouldUseBody) {\n      bodyOrParams = {\n        body\n      };\n    } else {\n      const params = Object.keys(req.body).reduce((obj, param) => {\n        const value = req.body[param];\n        obj[param] = shouldStringify(param) ? JSON.stringify(value) : value;\n        return obj;\n      }, {});\n      bodyOrParams = {\n        params: params\n      };\n    }\n  }\n  if (shouldUseMultipart && shouldUseBody) {\n    const form = new FormData();\n    form.append('operations', JSON.stringify(bodyOrParams.body));\n    const map = {};\n    const files = multipartInfo.files;\n    let i = 0;\n    files.forEach(paths => {\n      map[++i] = paths;\n    });\n    form.append('map', JSON.stringify(map));\n    i = 0;\n    files.forEach((_, file) => {\n      form.append(++i + '', file, file.name);\n    });\n    bodyOrParams.body = form;\n  }\n  // create a request\n  return httpClient.request(req.method, req.url, {\n    observe: 'response',\n    responseType: 'json',\n    reportProgress: false,\n    ...bodyOrParams,\n    ...req.options\n  });\n};\nconst mergeHeaders = (source, destination) => {\n  if (source && destination) {\n    const merged = destination.keys().reduce((headers, name) => headers.set(name, destination.getAll(name)), source);\n    return merged;\n  }\n  return destination || source;\n};\nfunction prioritize(...values) {\n  return values.find(val => typeof val !== 'undefined');\n}\nfunction createHeadersWithClientAwareness(context) {\n  // `apollographql-client-*` headers are automatically set if a\n  // `clientAwareness` object is found in the context. These headers are\n  // set first, followed by the rest of the headers pulled from\n  // `context.headers`.\n  let headers = context.headers && context.headers instanceof HttpHeaders ? context.headers : new HttpHeaders(context.headers);\n  if (context.clientAwareness) {\n    const {\n      name,\n      version\n    } = context.clientAwareness;\n    // If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    if (name && !headers.has('apollographql-client-name')) {\n      headers = headers.set('apollographql-client-name', name);\n    }\n    if (version && !headers.has('apollographql-client-version')) {\n      headers = headers.set('apollographql-client-version', version);\n    }\n  }\n  return headers;\n}\nconst defaults = {\n  batchInterval: 10,\n  batchMax: 10,\n  uri: 'graphql',\n  method: 'POST',\n  withCredentials: false,\n  includeQuery: true,\n  includeExtensions: false,\n  useMultipart: false\n};\n/**\n * Decides which value to pick from Context, Options or defaults\n */\nfunction pick(context, options, key) {\n  return prioritize(context[key], options[key], defaults[key]);\n}\nclass HttpBatchLinkHandler extends ApolloLink {\n  httpClient;\n  options;\n  batcher;\n  batchInterval;\n  batchMax;\n  print = print;\n  constructor(httpClient, options) {\n    super();\n    this.httpClient = httpClient;\n    this.options = options;\n    this.batchInterval = options.batchInterval || defaults.batchInterval;\n    this.batchMax = options.batchMax || defaults.batchMax;\n    if (this.options.operationPrinter) {\n      this.print = this.options.operationPrinter;\n    }\n    const batchHandler = operations => {\n      return new Observable$1(observer => {\n        const body = this.createBody(operations);\n        const headers = this.createHeaders(operations);\n        const {\n          method,\n          uri,\n          withCredentials\n        } = this.createOptions(operations);\n        if (typeof uri === 'function') {\n          throw new Error(`Option 'uri' is a function, should be a string`);\n        }\n        const req = {\n          method,\n          url: uri,\n          body: body,\n          options: {\n            withCredentials,\n            headers\n          }\n        };\n        const sub = fetch(req, this.httpClient, () => {\n          throw new Error('File upload is not available when combined with Batching');\n        }).subscribe({\n          next: result => observer.next(result.body),\n          error: err => observer.error(err),\n          complete: () => observer.complete()\n        });\n        return () => {\n          if (!sub.closed) {\n            sub.unsubscribe();\n          }\n        };\n      });\n    };\n    const batchKey = options.batchKey || (operation => {\n      return this.createBatchKey(operation);\n    });\n    this.batcher = new BatchLink({\n      batchInterval: this.batchInterval,\n      batchMax: this.batchMax,\n      batchKey,\n      batchHandler\n    });\n  }\n  createOptions(operations) {\n    const context = operations[0].getContext();\n    return {\n      method: pick(context, this.options, 'method'),\n      uri: pick(context, this.options, 'uri'),\n      withCredentials: pick(context, this.options, 'withCredentials')\n    };\n  }\n  createBody(operations) {\n    return operations.map(operation => {\n      const includeExtensions = prioritize(operation.getContext().includeExtensions, this.options.includeExtensions, false);\n      const includeQuery = prioritize(operation.getContext().includeQuery, this.options.includeQuery, true);\n      const body = {\n        operationName: operation.operationName,\n        variables: operation.variables\n      };\n      if (includeExtensions) {\n        body.extensions = operation.extensions;\n      }\n      if (includeQuery) {\n        body.query = this.print(operation.query);\n      }\n      return body;\n    });\n  }\n  createHeaders(operations) {\n    return operations.reduce((headers, operation) => {\n      return mergeHeaders(headers, operation.getContext().headers);\n    }, createHeadersWithClientAwareness({\n      headers: this.options.headers,\n      clientAwareness: operations[0]?.getContext()?.clientAwareness\n    }));\n  }\n  createBatchKey(operation) {\n    const context = operation.getContext();\n    if (context.skipBatching) {\n      return Math.random().toString(36).substring(2, 11);\n    }\n    const headers = context.headers && context.headers.keys().map(k => context.headers.get(k));\n    const opts = JSON.stringify({\n      includeQuery: context.includeQuery,\n      includeExtensions: context.includeExtensions,\n      headers\n    });\n    return prioritize(context.uri, this.options.uri, '') + opts;\n  }\n  request(op) {\n    return this.batcher.request(op);\n  }\n}\nclass HttpBatchLink {\n  httpClient;\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  create(options) {\n    return new HttpBatchLinkHandler(this.httpClient, options);\n  }\n  static ɵfac = function HttpBatchLink_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HttpBatchLink)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HttpBatchLink,\n    factory: HttpBatchLink.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpBatchLink, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1.HttpClient\n  }], null);\n})();\n\n// XXX find a better name for it\nclass HttpLinkHandler extends ApolloLink {\n  httpClient;\n  options;\n  requester;\n  print = print;\n  constructor(httpClient, options) {\n    super();\n    this.httpClient = httpClient;\n    this.options = options;\n    if (this.options.operationPrinter) {\n      this.print = this.options.operationPrinter;\n    }\n    this.requester = operation => new Observable$1(observer => {\n      const context = operation.getContext();\n      let method = pick(context, this.options, 'method');\n      const includeQuery = pick(context, this.options, 'includeQuery');\n      const includeExtensions = pick(context, this.options, 'includeExtensions');\n      const url = pick(context, this.options, 'uri');\n      const withCredentials = pick(context, this.options, 'withCredentials');\n      const useMultipart = pick(context, this.options, 'useMultipart');\n      const useGETForQueries = this.options.useGETForQueries === true;\n      const isQuery = operation.query.definitions.some(def => def.kind === 'OperationDefinition' && def.operation === 'query');\n      if (useGETForQueries && isQuery) {\n        method = 'GET';\n      }\n      const req = {\n        method,\n        url: typeof url === 'function' ? url(operation) : url,\n        body: {\n          operationName: operation.operationName,\n          variables: operation.variables\n        },\n        options: {\n          withCredentials,\n          useMultipart,\n          headers: this.options.headers\n        }\n      };\n      if (includeExtensions) {\n        req.body.extensions = operation.extensions;\n      }\n      if (includeQuery) {\n        req.body.query = this.print(operation.query);\n      }\n      const headers = createHeadersWithClientAwareness(context);\n      req.options.headers = mergeHeaders(req.options.headers, headers);\n      const sub = fetch(req, this.httpClient, this.options.extractFiles).subscribe({\n        next: response => {\n          operation.setContext({\n            response\n          });\n          observer.next(response.body);\n        },\n        error: err => observer.error(err),\n        complete: () => observer.complete()\n      });\n      return () => {\n        if (!sub.closed) {\n          sub.unsubscribe();\n        }\n      };\n    });\n  }\n  request(op) {\n    return this.requester(op);\n  }\n}\nclass HttpLink {\n  httpClient;\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  create(options) {\n    return new HttpLinkHandler(this.httpClient, options);\n  }\n  static ɵfac = function HttpLink_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HttpLink)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HttpLink,\n    factory: HttpLink.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpLink, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1.HttpClient\n  }], null);\n})();\n\n// http\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HttpBatchLink, HttpBatchLinkHandler, HttpLink, HttpLinkHandler };\n"],
  "mappings": "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",
  "names": ["OperationBatcher", "Observable", "BatchLink", "Observable"]
}
